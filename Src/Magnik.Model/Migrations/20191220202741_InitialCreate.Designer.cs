// <auto-generated />
using System;
using Magnik.Model.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Magnik.Model.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20191220202741_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Magnik.Model.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Street");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UName");

                    b.Property<string>("USurname");

                    b.Property<string>("UserImg");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("ZIP");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Magnik.Model.Entities.Breed", b =>
                {
                    b.Property<int>("ID_Breed")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BreedName");

                    b.Property<int>("TypeId");

                    b.HasKey("ID_Breed");

                    b.HasIndex("TypeId");

                    b.ToTable("Breed");
                });

            modelBuilder.Entity("Magnik.Model.Entities.Comment", b =>
                {
                    b.Property<int>("ID_Comment")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccounEmail");

                    b.Property<string>("AccountId");

                    b.Property<DateTime>("CommentTime");

                    b.Property<string>("Content");

                    b.Property<string>("Title");

                    b.HasKey("ID_Comment");

                    b.HasIndex("AccountId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Magnik.Model.Entities.Order", b =>
                {
                    b.Property<int>("ID_Order")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<DateTime>("OrderTimeNow");

                    b.Property<string>("OrderUserName");

                    b.Property<DateTime>("StartDateTime");

                    b.HasKey("ID_Order");

                    b.HasIndex("AccountId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Magnik.Model.Entities.Pet", b =>
                {
                    b.Property<int>("ID_Pet")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId");

                    b.Property<int>("PetAge");

                    b.Property<string>("PetImg");

                    b.Property<string>("PetName");

                    b.Property<bool>("PetSex");

                    b.Property<double>("PetWeight");

                    b.HasKey("ID_Pet");

                    b.HasIndex("AccountId");

                    b.ToTable("Pet");
                });

            modelBuilder.Entity("Magnik.Model.Entities.PetInfo", b =>
                {
                    b.Property<int>("ID_PetInfo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionPetInfo");

                    b.Property<int>("PetId");

                    b.Property<string>("TitlePetInfo");

                    b.HasKey("ID_PetInfo");

                    b.HasIndex("PetId");

                    b.ToTable("PetInfo");
                });

            modelBuilder.Entity("Magnik.Model.Entities.ServiceOfSitter", b =>
                {
                    b.Property<int>("ID_ServiceOfSitter")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId");

                    b.Property<string>("Description");

                    b.Property<int>("OrderId");

                    b.Property<double>("PriceService");

                    b.Property<string>("TitleService");

                    b.HasKey("ID_ServiceOfSitter");

                    b.HasIndex("AccountId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ServiceOfSitter");
                });

            modelBuilder.Entity("Magnik.Model.Entities.TypePet", b =>
                {
                    b.Property<int>("ID_TypePet")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PetId");

                    b.Property<string>("TypeOfPet");

                    b.HasKey("ID_TypePet");

                    b.HasIndex("PetId")
                        .IsUnique();

                    b.ToTable("TypePet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Magnik.Model.Entities.Breed", b =>
                {
                    b.HasOne("Magnik.Model.Entities.TypePet", "Type")
                        .WithMany("Breeds")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Magnik.Model.Entities.Comment", b =>
                {
                    b.HasOne("Magnik.Model.Entities.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("Magnik.Model.Entities.Order", b =>
                {
                    b.HasOne("Magnik.Model.Entities.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("Magnik.Model.Entities.Pet", b =>
                {
                    b.HasOne("Magnik.Model.Entities.Account", "Account")
                        .WithMany("Pets")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("Magnik.Model.Entities.PetInfo", b =>
                {
                    b.HasOne("Magnik.Model.Entities.Pet", "Pet")
                        .WithMany("PetInfos")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Magnik.Model.Entities.ServiceOfSitter", b =>
                {
                    b.HasOne("Magnik.Model.Entities.Account", "Account")
                        .WithMany("ServiceOfSitters")
                        .HasForeignKey("AccountId");

                    b.HasOne("Magnik.Model.Entities.Order", "Order")
                        .WithOne("ServiceOfSitter")
                        .HasForeignKey("Magnik.Model.Entities.ServiceOfSitter", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Magnik.Model.Entities.TypePet", b =>
                {
                    b.HasOne("Magnik.Model.Entities.Pet", "Pet")
                        .WithOne("TypePet")
                        .HasForeignKey("Magnik.Model.Entities.TypePet", "PetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Magnik.Model.Entities.Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Magnik.Model.Entities.Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Magnik.Model.Entities.Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Magnik.Model.Entities.Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
